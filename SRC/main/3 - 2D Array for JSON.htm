<!doctype HTML>
<html>
	<head>
		<meta content="text/html;charset=utf-8" http-equiv="Content-Type">
		<meta content="utf-8" http-equiv="encoding">
		<title>
			GRAPH OF TREES
		</title>
		<style type="text/css">
			p
			{
				background-color:lime;
				color: maroon;
			}
			body > button 
			{
				background: #428BCA;
				color: #fff;
				font-family: Sans-serif;
				font-size: 20px;
				height: 60px;
				width: 150px;
				line-height: 60px;
				margin: 25px 25px;
				text-align: center;
	    			border: 0;
	    			transition: all 0.3s ease 0s;
			}
			body
			{
				font-size:12px;
			}
			#d1
			{
				text-align:center;
				position:absolute;
				top:1.2in;
				left:0.2in;
				height:500px;	
				background-color:black;
				width:400px;
				vertical-align:text-top;
				border: 5px solid green;
				color:pink;
			}
			#d2
			{
				text-align:center;
				position:absolute;
				top:1.2in;
				left:9in;
				height:500px;	
				background-color:black;
				border: 5px solid green;
				width:400px;
				color:pink;
			}
			#b1
			{
				position:absolute;
				top:3in;
				left:5.5in;
			}
			button:hover 
			{
				background: #3071A9
			}
			#tb
			{
				position:absolute;
				text-align:center;
				top:2.665in;
				width:200px;
				height:40px;
				left:5.5in;
				font: italic bold 12px/30px Georgia, serif;
			}
			h2
			{
				text-align: center;
				font-size:20px;
				color:rgb(140,100,100);
			}
			.fileUpload
			{	
				width:1250px;
				height:50px;
				text-align:center;
			}
			#upload-id
			{
				text-align: center;
			}
		</style>
	</head>
	<body>
		<form id="jsonFile" name="jsonFile" enctype="multipart/form-data" method="post" class="fileUpload">
			<fieldset style="background-color:SkyBlue;" class="fileUpload">
				<h2>Json File:</h2>
				<p id="upload">
					<input type="file" id="fileinput" style='background-color:lime;' id='upload-id' />
					<input type='button' value='Load' onclick='handleFileSelect();'>
					<input type='button' value='Parse' onclick='parseJSON();'>
				</p>
	  		</fieldset>
		</form>
		<div id="d1">
			<p>
				ANCESTORS:
			</p>
			
		</div>
		<div id="d2">
			<p>
				DESCENDANTS:
			</p>
			
		</div>
		<button type="button" id="b1" onclick="operation()">CLICK</button> 
		<input type="text" autofocus id="tb" placeholder="Name of Node:"></input>	
		<script type="text/javascript">
			root = [];
			spli = [];
			
			var ins = function(arr)
			{
				var p = parseInt(arr[0]);
				if(isNaN(root[p][0]))
					root[p][0]=0;
				if(parseInt(root[p][0])>=0)
				{
					for(var i=1;i<arr.length;i++)
					{
						if(isNaN(root[parseInt(arr[i])][0]))
						{
							root[parseInt(arr[i])][0]=0;
						}
						if(!isNaN(arr[i]) && root[p].indexOf(arr[i])==-1)
						{
							root[p][parseInt(root[p][0])+1]=arr[i];
							root[p][0]=(parseInt(root[p][0])+1).toString();
						}
					}				
				}
				else
					alert(p+" cannot be a parent");	
				p=null;		
			}
			
			operation = function()
			{
				var inp=document.getElementById("tb").value.trim();
				show(inp);
				inp=null;
			}
			
			var del = function(n)
			{
				root.splice(n,1,0);
				for(var i=0;i<root.length;i++)
				{
					for(var j =1;j<=root[i][0];j++)
					{
						if(root[i][j]==parseInt(n))
						{
							root[i].splice(j,1);
							root[i][0]--;
						}
					}		
				}
			}
			
			var init = function()
			{
				for(var i=0;i<20000;i++)
				{
					root[i]=[];
				}
			}

			var show = function(n)
			{
				show_ances(n);
				show_desc(n);
			}

			var show_desc = function(name)
			{
				var str="<p>DESCENDANTS:</p><br>";
				var n=spli.indexOf(name);
				if(n==-1)
					str+="Wrong Input!<br>";
				else
				{
					if(!isNaN(root[parseInt(n)][0]))
					if(root[parseInt(n)][0]>0)
					for(var i=1;i<=root[parseInt(n)][0];i++)
						str+=spli[root[parseInt(n)][i]]+"<br><br>";
					else
						str+="Leaf Node!<br><br>";
				}	
				document.getElementById("d2").innerHTML=str;
				str=n=null;		
			}
			
			var show_ances = function(name)
			{
				var str="<p>ANCESTORS:</p><br>",f=0;
				var n=spli.indexOf(name);
				if(n==-1)
					str+="Wrong Input!<br>";
				else
				{
					for(var i=0;i<root.length;i++)
					{
						for(var j=1;j<=root[i][0];j++)
						{
							if(root[i][j]==parseInt(n))
							{
								str+=spli[i]+"<br><br>";
								f=1;
							}
						}
					}
					if(f);
					
					else if(isNaN(root[parseInt(n)][0]));
							
					else
						str+="No Parents!<br>";
				}
				document.getElementById("d1").innerHTML=str;
				str=f=n=null;
			}
			
			function handleFileSelect()
            		{               
		        	if (window.File && window.FileReader && window.FileList && window.Blob) {} 
		        	else 
		        	{
		            		alert('The File APIs are not fully supported in this browser.');
		            		return;
		        	}   
		        	input = document.getElementById('fileinput');
		        	if (!input) 
		          		alert("Couldn't find the fileinput element.");
		       		else if (!input.files) 
		          		alert("This browser doesn't seem to support the `files` property of file inputs.");
		       		else if (!input.files[0]) 
		          		alert("Please select a file before clicking 'Load'");               
		       		else 
		       		{
		          		file = input.files[0];
		          		fr = new FileReader();
		          		fr.onload = receivedText;
		          		fr.readAsText(file);
		       		}
            		}

			function receivedText() 
			{           
               			result = fr.result;
            		}  
            		
			function eliminateDuplicates(arr) 
			{
				var i;
				var len=arr.length;
				var out=[];
				var obj={};
				for (i=0;i<len;i++) 
				{
					if (!obj[arr[i]])
					{
						obj[arr[i]]={};
						out.push(arr[i]);
					}
				}
				obj=len=i=null;
				return out;
			}
		
			function parsetoarray()
			{	
				spli=result.split("{");
				var temp1,disp="",ind=-1;
				spli.splice(0,1);
				for(var i=0;i<spli.length;i++)
				{
					spli[i]=spli[i].replace(new RegExp('[":\t\r\n]','g'),'');
					if(spli[i].indexOf('[')!=-1)
					{
						spli[i]=spli[i].replace(new RegExp('[\\]}]','g'),'');
						spli[i]=spli[i].replace(new RegExp('["\\[]','g'),',');
						temp1=spli[i].split(',');
						spli=spli.slice(0,i).concat(temp1,spli.slice(i+1,spli.length));
					}
				}
				for(var i=0;i<spli.length;i++)
					spli[i]=spli[i].trim();
				spli=eliminateDuplicates(spli);
				spli.unshift("root");
				temp1=disp=ind=null;
			}
			
			function display()
			{
				var strin="";
				for(var i=0;i<root.length;i++)
				{
					if(!isNaN(root[i][0]))
					{
						if(parseInt(root[i][0])!=0)
						{
							if(i>=0)
							strin+="\n\n"+ spli[i]+" :: ";
							else
							strin+="MEMORY:\n\n"+spli[i]+" :: ";
							for(var j =0;j<=root[i][0];j++)
							{
									if(j==0)
										strin+="("+root[i][j]+") - ";
									else if(j!=root[i][0])
										strin+=spli[parseInt(root[i][j])]+",";
									else
										strin+=spli[parseInt(root[i][j])];
							}
						}
					}	
				}
				alert(strin);
				strin=null;
			}
			
			function parseJSON()
			{
				var brac=0,node="",j=0,flag=0;
				arr=[];
				parsetoarray();
				arr.push(spli[0]);
				var node1;
				result=result.replace(new RegExp('[\t\r\n]','g'),'');
				try
				{
					for(var i=0;i<result.length;i++)
					{
						var node="";
						var temp="";
						if(flag==1)
						{
							if(result[i]=='"')
							{
								node=result.substring(i+1).split('"')[0].trim();
								if(node.indexOf(':')==-1)
								{
									ins([spli.indexOf(arr[arr.length-1]),spli.indexOf(node)]);
									arr.push(node);
								}
							}	
						}
						if(result[i]=='{')
						{
							brac++;
							j=i+1;
							node=result.substring(i+1);
							if(node.indexOf(':')>0)
								i+=node.indexOf(':');
							node=result.substring(j,i);
							node=node.replace(new RegExp('["]','g'),'');
							node=node.trim();
							if(arr.length>0)
							{
								ins([spli.indexOf(arr[arr.length-1]),spli.indexOf(node)]);
							}
							if(result[i+3]=='[')
								flag=1;
							arr.push(node);
						}
						else if(result[i]==':')
						{
							i+=2;
							if(result[i]=='[')
							{
								node1="";
								flag=1;
								node1=result.substring(i+1);
								i+=node1.split(']')[0].length;
								node1=node1.split(']')[0].replace(new RegExp('["]','g'),'').split(',');
								for(var l=0;l<node1.length;l++)
								{
									node1[l]=node1[l].trim();
									node1[l]=spli.indexOf(node1[l]);
								}
								node1.unshift(spli.indexOf(arr[arr.length-1]));
								ins(node1);
							}
							else if(result[i]=='{')
								i-=2;
							
						}
						if(result[i]=='}' || result[i]==']')
							arr.pop();
					}
				}
				catch(e)
				{
					alert(e.message);
				}
				display();
				brac=node=j=flag=arr=node1=null;
			}
			
			window.onload=init;
			
		</script>
	</body>
</html>
